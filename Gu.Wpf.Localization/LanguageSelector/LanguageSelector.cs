namespace Gu.Wpf.Localization
{
    using System;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.Windows;
    using System.Windows.Controls;
    using System.Windows.Markup;
    using System.Windows.Threading;

    using Gu.Localization;

    /// <summary>
    /// Control for selecting language.
    /// </summary>
    [ContentProperty(nameof(Languages))]
    public class LanguageSelector : Control
    {
#pragma warning disable SA1202 // Elements must be ordered by access
        /// <summary>Identifies the <see cref="AutogenerateLanguages"/> dependency property.</summary>
        public static readonly DependencyProperty AutogenerateLanguagesProperty = DependencyProperty.Register(
            nameof(AutogenerateLanguages),
            typeof(bool),
            typeof(LanguageSelector),
            new PropertyMetadata(
                default(bool),
                OnAutoGenerateLanguagesChanged));

        private static readonly DependencyPropertyKey LanguagesPropertyKey = DependencyProperty.RegisterReadOnly(
            nameof(Languages),
            typeof(ObservableCollection<Language>),
            typeof(LanguageSelector),
            new PropertyMetadata(default(ObservableCollection<Language>)));

        /// <summary>Identifies the <see cref="Languages"/> dependency property.</summary>
        public static readonly DependencyProperty LanguagesProperty = LanguagesPropertyKey.DependencyProperty;

        /// <summary>Identifies the <see cref="SelectedLanguage"/> dependency property.</summary>
        public static readonly DependencyProperty SelectedLanguageProperty = DependencyProperty.Register(
            nameof(SelectedLanguage),
            typeof(Language),
            typeof(LanguageSelector),
            new PropertyMetadata(default(Language)));

        /// <summary>Identifies the <see cref="ItemTemplate"/> dependency property.</summary>
        public static readonly DependencyProperty ItemTemplateProperty = DependencyProperty.Register(
            nameof(ItemTemplate),
            typeof(DataTemplate),
            typeof(LanguageSelector),
            new PropertyMetadata(default(DataTemplate)),
            ValidateItemTemplate);

#pragma warning restore SA1202 // Elements must be ordered by access

        static LanguageSelector()
        {
            DefaultStyleKeyProperty.OverrideMetadata(typeof(LanguageSelector), new FrameworkPropertyMetadata(typeof(LanguageSelector)));
        }

        /// <summary>Initializes a new instance of the <see cref="LanguageSelector"/> class.</summary>
        public LanguageSelector()
        {
            this.Languages = new ObservableCollection<Language>();
            CultureChangedEventManager.UpdateHandler((_, x) => this.SetCurrentValue(
                SelectedLanguageProperty,
                this.Languages.FirstOrDefault(l => Gu.Localization.Culture.NameEquals(Translator.CurrentCulture, l.Culture))));
        }

        /// <summary>
        /// Gets or sets a value indicating whether languages should be autogenerated. If true <see cref="Languages"/> are kept in sync with <see cref="Translator.Cultures"/>
        /// Default flags are picked from ./Flags/.. if a match is found.
        /// </summary>
        public bool AutogenerateLanguages
        {
            get => (bool)this.GetValue(AutogenerateLanguagesProperty);
            set => this.SetValue(AutogenerateLanguagesProperty, value);
        }

        /// <summary>
        /// Gets or sets the languages.
        /// </summary>
#pragma warning disable CA2227 // Collection properties should be read only
        public ObservableCollection<Language> Languages
#pragma warning restore CA2227 // Collection properties should be read only
        {
            get => (ObservableCollection<Language>)this.GetValue(LanguagesProperty);
            protected set => this.SetValue(LanguagesPropertyKey, value);
        }

        /// <summary>
        /// Gets or sets the selected language.
        /// Convenience property mapping to <see cref="Translator.CurrentCulture"/>.
        /// </summary>
        public Language SelectedLanguage
        {
            get => (Language)this.GetValue(SelectedLanguageProperty);
            set => this.SetValue(SelectedLanguageProperty, value);
        }

        /// <summary>
        /// Gets or sets the <see cref="DataTemplate"/> to use for rendering items of type <see cref="Language"/>.
        /// </summary>
        public DataTemplate ItemTemplate
        {
            get => (DataTemplate)this.GetValue(ItemTemplateProperty);
            set => this.SetValue(ItemTemplateProperty, value);
        }

        private static void OnAutoGenerateLanguagesChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var languageSelector = (LanguageSelector)d;
            languageSelector.Dispatcher.BeginInvoke(DispatcherPriority.Loaded, new Action(languageSelector.SyncLanguages));
        }

        private static bool ValidateItemTemplate(object value)
        {
            if (value is DataTemplate dataTemplate &&
                dataTemplate.DataType is Type type &&
                type != typeof(Language))
            {
                return false;
            }

            return true;
        }

        private void SyncLanguages()
        {
            if (this.AutogenerateLanguages)
            {
                for (var i = this.Languages.Count - 1; i >= 0; i--)
                {
                    if (!Translator.ContainsCulture(this.Languages[i].Culture))
                    {
                        this.Languages.RemoveAt(i);
                    }
                }

                foreach (var culture in Translator.Cultures)
                {
                    if (this.Languages.Any(x => Culture.NameEquals(x.Culture, culture)))
                    {
                        continue;
                    }

                    var language = new Language(culture);
                    if (CultureToFlagPathConverter.TryGetFlagPath(culture, out var path))
                    {
                        language.FlagSource = new Uri(path, UriKind.Absolute);
                    }

                    this.Languages.Add(language);
                }
            }
        }
    }
}
